(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{230:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"concept"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concept"}},[e._v("#")]),e._v(" concept")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("3 main purpose:")])]),e._v(" "),a("li",[a("p",[e._v("when to waste resource")])]),e._v(" "),a("li",[a("p",[e._v("main difficult of writing a real-time system")])]),e._v(" "),a("li",[a("p",[e._v("distinction between kernel mode and user mode")])]),e._v(" "),a("li",[a("p",[e._v("following instruction should be previledged, in kernel mode")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("set value of timer")])]),e._v(" "),a("li",[a("p",[e._v("clear memory")])]),e._v(" "),a("li",[a("p",[e._v("turn off interrupts")])]),e._v(" "),a("li",[a("p",[e._v("modify entries in device-status table")])]),e._v(" "),a("li",[a("p",[e._v("access I/O device")])])])])]),e._v(" "),a("h2",{attrs:{id:"ring-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ring-level"}},[e._v("#")]),e._v(" Ring level")]),e._v(" "),a("p",[e._v("kernel mode in ring 0, user mode in ring 3")]),e._v(" "),a("h2",{attrs:{id:"register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register"}},[e._v("#")]),e._v(" Register")]),e._v(" "),a("blockquote",[a("p",[e._v("x86 GPR\nEAX\nEBX\nECX counter in loops\nEDX\nEDI destination in string/memory ops\nESI source in string/memory ops\nESP stack pointer\nEBP base frame pointer\nCR0 paging on/off\nCR2 linear address that caused a page fault\nCR3 base address of paging data structure\nCR4 hardware virtualization config\nDR0-7 memory breakpoints")])]),e._v(" "),a("blockquote",[a("p",[e._v("EFLAGS")])]),e._v(" "),a("p",[e._v("ZF zero\nSF sign\nCF carry\nOF overflow")]),e._v(" "),a("p",[e._v("jump table")]),e._v(" "),a("blockquote",[a("p",[e._v("IDT\nchange with reboots")])]),e._v(" "),a("h2",{attrs:{id:"assembly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assembly"}},[e._v("#")]),e._v(" assembly")]),e._v(" "),a("p",[e._v("XOR reg, reg")]),e._v(" "),a("p",[e._v("REP/REPNE prefix")]),e._v(" "),a("p",[e._v("STOS/SCAS")]),e._v(" "),a("blockquote",[a("p",[e._v("calling conventions\nCDECL\nSTDCALL\nFASTCALL")])]),e._v(" "),a("blockquote",[a("p",[e._v("function prologue/epilogue")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sum = addme(x,y)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("push ebp\nmove ebp, esp\n\nmovsx eax, word ptr [ebp+8]\nmovsx ecx, word ptr [ebp+0Ch]\nadd eax, ecx\n\nmov esp, ebp\npop ebp\nretn\n")])])]),a("p",[e._v("frame pointer omission: skip EBP")]),e._v(" "),a("blockquote",[a("p",[e._v("x64")])]),e._v(" "),a("p",[e._v("RIP-relative addressing")]),e._v(" "),a("p",[e._v("one calling convention")]),e._v(" "),a("h1",{attrs:{id:"interrupt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt"}},[e._v("#")]),e._v(" Interrupt")]),e._v(" "),a("h2",{attrs:{id:"interrupt-vector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interrupt-vector"}},[e._v("#")]),e._v(" Interrupt vector")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("contains the addresses of all the service routines")])]),e._v(" "),a("li",[a("p",[e._v("asynchronous :Triggered by an event from a “device”")])])]),e._v(" "),a("h3",{attrs:{id:"program-status-word"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#program-status-word"}},[e._v("#")]),e._v(" program status word")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("condition code bits set by comparion instructions")])]),e._v(" "),a("li",[a("p",[e._v("CPU priority")])]),e._v(" "),a("li",[a("p",[e._v("mode, user/kernel")])])]),e._v(" "),a("h1",{attrs:{id:"trap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trap"}},[e._v("#")]),e._v(" trap")]),e._v(" "),a("p",[e._v("Synchronous: triggered by “trap instruction” for syscall")]),e._v(" "),a("p",[e._v("Side-effect of executing a trap in userspace is that an “exception” is raised and program execution continues at a prescribed instruction in the kernel")]),e._v(" "),a("h1",{attrs:{id:"exception"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exception"}},[e._v("#")]),e._v(" exception")]),e._v(" "),a("p",[e._v("Synchronous: triggered by a “fault condition” of an instruction condition")]),e._v(" "),a("h1",{attrs:{id:"process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process"}},[e._v("#")]),e._v(" Process")]),e._v(" "),a("ul",[a("li",[e._v("process is active entity, program is passive entity")])]),e._v(" "),a("p",[e._v("include")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("address space")])]),e._v(" "),a("li",[a("p",[e._v("process table entries, state, registers. open files, threads state, resources.")])])]),e._v(" "),a("blockquote",[a("p",[e._v("parts")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("text section, program code")])]),e._v(" "),a("li",[a("p",[e._v("program counter, processor registers")])]),e._v(" "),a("li",[a("p",[e._v("stack: function parameters, return addresses, local variables")])]),e._v(" "),a("li",[a("p",[e._v("data section, global variables")])]),e._v(" "),a("li",[a("p",[e._v("heap: memory dynamically allocated")])])]),e._v(" "),a("h2",{attrs:{id:"address-space"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#address-space"}},[e._v("#")]),e._v(" address space")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("address virtualization")])]),e._v(" "),a("li",[a("p",[e._v("protect private sections")])]),e._v(" "),a("li",[a("p",[e._v("readonly, readwrite, execute")])])]),e._v(" "),a("h2",{attrs:{id:"process-control-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-control-block"}},[e._v("#")]),e._v(" process control block")]),e._v(" "),a("blockquote",[a("p",[e._v("save and load PCB when interrupt or system call")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("process state(running, waiting)")])]),e._v(" "),a("li",[a("p",[e._v("program counter(location of next instruction)")])]),e._v(" "),a("li",[a("p",[e._v("CPU registers")])]),e._v(" "),a("li",[a("p",[e._v("CPU scheduling information, priorities, scheduling queue pointers")])]),e._v(" "),a("li",[a("p",[e._v("memory allocated")])]),e._v(" "),a("li",[a("p",[e._v("CPU used, clock time, time limites")])]),e._v(" "),a("li",[a("p",[e._v("IO devices, open files")])])]),e._v(" "),a("h2",{attrs:{id:"process-struct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-struct"}},[e._v("#")]),e._v(" process struct")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\npid t_pid; /* process identifier */\nlong state; /* state of the process */\nunsigned int time_slice /* scheduling information */\nstruct task_struct *parent; /* this process’s parent */\nstruct list_head children; /* this process’s children */\nstruct files_struct *files; /* list of open files */\nstruct mm_struct *mm; /* address space of this process */\n\n")])])]),a("h2",{attrs:{id:"process-scheduling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-scheduling"}},[e._v("#")]),e._v(" process scheduling")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("job queue, all processes")])]),e._v(" "),a("li",[a("p",[e._v("ready queue, residing in main memory, ready to execute")])]),e._v(" "),a("li",[a("p",[e._v("device queue, waiting for IO")])])]),e._v(" "),a("blockquote",[a("p",[e._v("CPU bound, IO bound")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("short-term scheduler(CPU scheduler), milisec, what to exec next")])]),e._v(" "),a("li",[a("p",[e._v("long-term scheduler(job scheduler), sec, what to put to ready queue")])]),e._v(" "),a("li",[a("p",[e._v("medium-term scheduler, remove, store, recover, control degree of multiprogramming")])])]),e._v(" "),a("h2",{attrs:{id:"context-switch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context-switch"}},[e._v("#")]),e._v(" context switch")]),e._v(" "),a("p",[e._v("Process Control Block")]),e._v(" "),a("h2",{attrs:{id:"process-creation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-creation"}},[e._v("#")]),e._v(" process creation")]),e._v(" "),a("p",[e._v("parent "),a("code",[e._v("fork()")]),e._v(" children, and "),a("code",[e._v("exec()")]),e._v(" children, wait till children's termination")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("sharing options, share all, share subset, share none")])]),e._v(" "),a("li",[a("p",[e._v("execution options, execute concurrently, or parent watis until children terminate")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\npid_t pid = fork();\nif (pid == 0) {\n  // child process\n  execv(path, executablename);\n} else if (pid > 0) {\n  // parent process\n  waitpid(pid, &status, option);\n} else {\n  // fork failed\n}\n")])])]),a("h2",{attrs:{id:"process-termination"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-termination"}},[e._v("#")]),e._v(" process termination")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("ask os to delete itself by calling "),a("code",[e._v("exit()")])])]),e._v(" "),a("li",[a("p",[e._v("return data from child to parent using "),a("code",[e._v("wait()")])])]),e._v(" "),a("li",[a("p",[e._v("parent use "),a("code",[e._v("abort()")]),e._v(" to terminate child")])]),e._v(" "),a("li",[a("p",[e._v("cascade termination, child existence is dependent on parent")])])]),e._v(" "),a("blockquote",[a("p",[e._v("zombie, if no parent waiting")])]),e._v(" "),a("blockquote",[a("p",[e._v("orphan, if parent terminate without calling wait()")])]),e._v(" "),a("h2",{attrs:{id:"param-passing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#param-passing"}},[e._v("#")]),e._v(" param passing")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("pass to registers")])]),e._v(" "),a("li",[a("p",[e._v("block(linux/solaris), save addresses in register")])]),e._v(" "),a("li",[a("p",[e._v("stack, pushed by program, popped by OS")])])]),e._v(" "),a("h2",{attrs:{id:"system-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-call"}},[e._v("#")]),e._v(" system call")]),e._v(" "),a("p",[e._v("system calls are an extension of ABI(Application Binary Interface)")]),e._v(" "),a("p",[e._v("definition agreed upon by libc and kernel")]),e._v(" "),a("p",[e._v("implemented as assembler largely taking the arguments already in the right registers and "),a("a",{attrs:{href:"#trap"}},[e._v("TRAP")]),e._v("-ing into the kernel")]),e._v(" "),a("p",[e._v("and run a peice of assembler code:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("check the syscall number is in range")])]),e._v(" "),a("li",[a("p",[e._v("change stack to kernel")])]),e._v(" "),a("li",[a("p",[e._v("arguments already in place")])]),e._v(" "),a("li",[a("p",[e._v("call to syscall_table[registers.syscall_number]")])]),e._v(" "),a("li",[a("p",[e._v("switch back from kernel stack to user stack and "),a("a",{attrs:{href:""}},[e._v("RFI")])])])]),e._v(" "),a("p",[e._v("The compiler associates the syscall number with the kernel internal function")]),e._v(" "),a("h2",{attrs:{id:"system-call-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-call-list"}},[e._v("#")]),e._v(" system call list")]),e._v(" "),a("ul",[a("li",[e._v("file management")])]),e._v(" "),a("p",[e._v("create file, delete file")]),e._v(" "),a("p",[e._v("open, close")]),e._v(" "),a("p",[e._v("read, write, reposition")]),e._v(" "),a("p",[e._v("get, set file attributes")]),e._v(" "),a("ul",[a("li",[e._v("device management")])]),e._v(" "),a("p",[e._v("request, release device")]),e._v(" "),a("p",[e._v("read, write, reposition")]),e._v(" "),a("p",[e._v("get, set device attributes")]),e._v(" "),a("p",[e._v("attach, detach devices")]),e._v(" "),a("ul",[a("li",[e._v("info maintenance")])]),e._v(" "),a("p",[e._v("get, set time or date")]),e._v(" "),a("p",[e._v("get, set system data")]),e._v(" "),a("p",[e._v("get, set process, file, device attributes")]),e._v(" "),a("ul",[a("li",[e._v("communications")])]),e._v(" "),a("p",[e._v("crate, delete communication connection")]),e._v(" "),a("p",[e._v("send, receive messages, to host name, or process name, from client to server")]),e._v(" "),a("p",[e._v("create, gain access to memory regions")]),e._v(" "),a("p",[e._v("transfer status info")]),e._v(" "),a("p",[e._v("attach and detach remote devices")]),e._v(" "),a("ul",[a("li",[e._v("protection")])]),e._v(" "),a("p",[e._v("control access")]),e._v(" "),a("p",[e._v("get, set permissions")]),e._v(" "),a("p",[e._v("allow, deny user access")]),e._v(" "),a("h2",{attrs:{id:"system-programs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-programs"}},[e._v("#")]),e._v(" system programs")]),e._v(" "),a("ul",[a("li",[e._v("file management")])]),e._v(" "),a("p",[e._v("create, delete, copy, rename, print, dump, list")]),e._v(" "),a("ul",[a("li",[e._v("status info")])]),e._v(" "),a("p",[e._v("data, time, memory space, disk space, number of users")]),e._v(" "),a("p",[e._v("performance, logging, debugging")]),e._v(" "),a("p",[e._v("format and print to terminals")]),e._v(" "),a("p",[e._v("registry - store and retrive configuration info")]),e._v(" "),a("ul",[a("li",[e._v("file modification")])]),e._v(" "),a("p",[e._v("create, modify, search content, transform text")]),e._v(" "),a("ul",[a("li",[e._v("programming-language support")])]),e._v(" "),a("p",[e._v("compilers, assemblers, debuggers, interpreters")]),e._v(" "),a("ul",[a("li",[e._v("program loading and execution")])]),e._v(" "),a("p",[e._v("absolute loaders, relocatable loaders, linkage editors, overlay loaders, debugging systems")]),e._v(" "),a("ul",[a("li",[e._v("comminicatiosn")])]),e._v(" "),a("p",[e._v("create virtual connection among processes, users, computer systems.\nabsolute loaders")]),e._v(" "),a("ul",[a("li",[e._v("background service")])]),e._v(" "),a("p",[e._v("launch at boot time, disk checking, process scheduling, error logging, printing")]),e._v(" "),a("p",[e._v("subsystems, daemons")]),e._v(" "),a("h2",{attrs:{id:"process-states"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-states"}},[e._v("#")]),e._v(" process states")]),e._v(" "),a("p",[e._v("new, running, waiting, ready, terminated")]),e._v(" "),a("hr"),e._v(" "),a("h1",{attrs:{id:"process-scheduling-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-scheduling-2"}},[e._v("#")]),e._v(" process scheduling")]),e._v(" "),a("h2",{attrs:{id:"short-term-scheduler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#short-term-scheduler"}},[e._v("#")]),e._v(" short-term scheduler")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("ready")])]),e._v(" "),a("li",[a("p",[e._v("running")])]),e._v(" "),a("li",[a("p",[e._v("waiting")])]),e._v(" "),a("li",[a("p",[e._v("terminate")])])]),e._v(" "),a("blockquote",[a("p",[e._v("running to wait, terminate are non-preemptive, all others are preemptive, caused by access to shared data, preemption in kernel mode, interrupt during crucial os activities.")])]),e._v(" "),a("h2",{attrs:{id:"dispatcher"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatcher"}},[e._v("#")]),e._v(" dispatcher")]),e._v(" "),a("p",[e._v("give control of CPU to the process selected by scheduler")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("context switch")])]),e._v(" "),a("li",[a("p",[e._v("switch to user mode")])]),e._v(" "),a("li",[a("p",[e._v("jmp to the location")])])]),e._v(" "),a("blockquote",[a("p",[e._v("dispatch lantency: $t_{start new proc} - t_{stop one proc}$\n= confict phase(real-time CPU scheduling) + dispatch phase")])]),e._v(" "),a("h3",{attrs:{id:"conflict-phase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conflict-phase"}},[e._v("#")]),e._v(" conflict phase")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("preempt process running in kernel mode")])]),e._v(" "),a("li",[a("p",[e._v("release resources needed by high prio processes")])])]),e._v(" "),a("h2",{attrs:{id:"scheduler-metric"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheduler-metric"}},[e._v("#")]),e._v(" scheduler metric")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("CPU utilization")])]),e._v(" "),a("li",[a("p",[e._v("throughtput")])]),e._v(" "),a("li",[a("p",[e._v("turnaround time, amount of time to execute a particular process")])]),e._v(" "),a("li",[a("p",[e._v("waiting time")])]),e._v(" "),a("li",[a("p",[e._v("response time")])])]),e._v(" "),a("h3",{attrs:{id:"convoy-effect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#convoy-effect"}},[e._v("#")]),e._v(" convoy effect")]),e._v(" "),a("p",[e._v("short process behind long process")]),e._v(" "),a("h2",{attrs:{id:"priority-scheduling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#priority-scheduling"}},[e._v("#")]),e._v(" priority scheduling")]),e._v(" "),a("p",[e._v("use aging(increase prio as time progresses) to solve starvation(low prio never get served)")]),e._v(" "),a("h2",{attrs:{id:"round-robin-with-quantum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#round-robin-with-quantum"}},[e._v("#")]),e._v(" round robin with quantum")]),e._v(" "),a("p",[e._v("80% of CPU bursts should be shorter than q")]),e._v(" "),a("h2",{attrs:{id:"multilevel-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multilevel-queue"}},[e._v("#")]),e._v(" multilevel queue")]),e._v(" "),a("p",[e._v("scheduling between queues")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("fixed prio, serve all from foreground and then background")])]),e._v(" "),a("li",[a("p",[e._v("time slice, 80% to fg, 20% to bg")])])]),e._v(" "),a("p",[e._v("implement aging, move between queues")]),e._v(" "),a("h2",{attrs:{id:"thread-scheduling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thread-scheduling"}},[e._v("#")]),e._v(" thread scheduling")]),e._v(" "),a("p",[e._v("process-contention scope")]),e._v(" "),a("p",[e._v("system-contention scope")]),e._v(" "),a("p",[e._v("linux macos only allow pthread_scope_system")]),e._v(" "),a("h2",{attrs:{id:"multi-processor-scheudling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multi-processor-scheudling"}},[e._v("#")]),e._v(" multi processor scheudling")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("homogeneous")])]),e._v(" "),a("li",[a("p",[e._v("asymmetric, only one processor access the data structures")])]),e._v(" "),a("li",[a("p",[e._v("symmetric(SMP), most common; each has self-sheduling, ready queue in common, or each has its own")])])]),e._v(" "),a("blockquote",[a("p",[e._v("processor affinity, due to memory locality, process are close to certain processor.")])]),e._v(" "),a("blockquote",[a("p",[e._v("might need move process across processors, either")])]),e._v(" "),a("ul",[a("li",[e._v("push, periodic task check load on processors, and move task across CPUs")]),e._v(" "),a("li",[e._v("pull, idle processors pulls waiting task fro busy one")])]),e._v(" "),a("h2",{attrs:{id:"real-time-scheduling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#real-time-scheduling"}},[e._v("#")]),e._v(" real time scheduling")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("soft real time")])]),e._v(" "),a("li",[a("p",[e._v("hard real time")])])]),e._v(" "),a("h3",{attrs:{id:"rate-montonic-scheduling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rate-montonic-scheduling"}},[e._v("#")]),e._v(" Rate Montonic Scheduling")]),e._v(" "),a("p",[e._v("prio assigned based on inverse of period")]),e._v(" "),a("h3",{attrs:{id:"earliest-deadline-first-edf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#earliest-deadline-first-edf"}},[e._v("#")]),e._v(" earliest deadline first(EDF)")]),e._v(" "),a("p",[e._v("prio assigned based on deadline")]),e._v(" "),a("h3",{attrs:{id:"proportional-share-scheduling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proportional-share-scheduling"}},[e._v("#")]),e._v(" proportional share scheduling")]),e._v(" "),a("h2",{attrs:{id:"little-s-formula"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#little-s-formula"}},[e._v("#")]),e._v(" little's formula")]),e._v(" "),a("p",[e._v("in steady state, processes leaving queue must equal processes arriving")]),e._v(" "),a("p",[e._v("$$ n = \\lambda \\mathbf W $$")]),e._v(" "),a("p",[e._v("n: average queue length")]),e._v(" "),a("p",[e._v("W: average waiting time in queue")]),e._v(" "),a("p",[e._v("$\\lambda$: average arrival rate into queue")]),e._v(" "),a("h1",{attrs:{id:"thread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thread"}},[e._v("#")]),e._v(" Thread")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("processes are resource containers")])]),e._v(" "),a("li",[a("p",[e._v("threads are unit of execution in a process")])]),e._v(" "),a("li",[a("p",[e._v("threads share code, data, files")])]),e._v(" "),a("li",[a("p",[e._v("threads has own registers, stacks")])])]),e._v(" "),a("h2",{attrs:{id:"amdahl’s-law"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#amdahl’s-law"}},[e._v("#")]),e._v(" Amdahl’s Law")]),e._v(" "),a("p",[e._v("$$ speedup \\leq \\frac{1}{S + \\frac{1-S}{N}} $$")]),e._v(" "),a("p",[e._v("S: serial portion (parallel or serial)")]),e._v(" "),a("p",[e._v("N: processing cores")]),e._v(" "),a("p",[e._v("N goes to infinite, speedup approaches to $\\frac{1}{S}$")]),e._v(" "),a("h2",{attrs:{id:"thread-mapping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thread-mapping"}},[e._v("#")]),e._v(" thread mapping")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("many to one")])]),e._v(" "),a("li",[a("p",[e._v("one to one")]),e._v(" "),a("ul",[a("li",[e._v("linux, window, solaris")])])]),e._v(" "),a("li",[a("p",[e._v("many to many")]),e._v(" "),a("ul",[a("li",[e._v("windows ThreadFiber")])])])]),e._v(" "),a("h2",{attrs:{id:"pthread"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pthread"}},[e._v("#")]),e._v(" pthread")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("either user or kernel level")])]),e._v(" "),a("li",[a("p",[e._v("POSIX standard IEEE 1003.1c")])]),e._v(" "),a("li",[a("p",[e._v("include <pthread.h>")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("void *runner(void *param)")])]),e._v(" "),a("li",[a("code",[e._v("pthread_t tid;")])]),e._v(" "),a("li",[a("code",[e._v("pthread_attr_t attr;")])]),e._v(" "),a("li",[a("code",[e._v("pthread_exit(0);")])])])]),e._v(" "),a("li",[a("p",[e._v("thread local storage")])])]),e._v(" "),a("h2",{attrs:{id:"implicit-threads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implicit-threads"}},[e._v("#")]),e._v(" implicit threads")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("thread pools")]),e._v(" "),a("ul",[a("li",[e._v("create new is slow")]),e._v(" "),a("li",[e._v("size bounded")]),e._v(" "),a("li",[e._v("seperation of tasks")])])]),e._v(" "),a("li",[a("p",[e._v("OpenMP")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("#pragma omp parallel for")])])])]),e._v(" "),a("li",[a("p",[e._v("GCD")]),e._v(" "),a("ul",[a("li",[e._v("block "),a("code",[e._v("^{}")])]),e._v(" "),a("li",[e._v("serial(main queue) and concurrent(priority low, default, high)")]),e._v(" "),a("li",[a("code",[e._v("dispatch_queue_t queue = dispatch_get_global_queue(prio_default, 0);")])]),e._v(" "),a("li",[a("code",[e._v("dispatch_async(queue, ^{});")])])])])]),e._v(" "),a("h2",{attrs:{id:"thread-cancellation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thread-cancellation"}},[e._v("#")]),e._v(" Thread cancellation")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("async cancel, terminate immediately")])]),e._v(" "),a("li",[a("p",[e._v("deferred cancel, allow thread periodically check if itself should be cancelled")])]),e._v(" "),a("li",[a("p",[e._v("cancel state either disabled or enabled, cancel default mode is deferred")])]),e._v(" "),a("li",[a("p",[e._v("cancellation is a signal")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("pthread_testcancel()")])])]),e._v(" "),a("li",[a("p",[e._v("cleanup handler")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("pthread_t tid;\n\npthread_create(&tid, 0, worker, NULL);\n\npthread_cancel(tid);\n")])])]),a("h1",{attrs:{id:"ipc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ipc"}},[e._v("#")]),e._v(" IPC")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("shared memory")])]),e._v(" "),a("li",[a("p",[e._v("message passing")])])]),e._v(" "),a("h2",{attrs:{id:"posix-ipc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#posix-ipc"}},[e._v("#")]),e._v(" Posix IPC")]),e._v(" "),a("ol",[a("li",[e._v("create shared memory segment")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('char * name = "this class sucks";\nint shm_fd = shm_open(name, O_CREAT | O_RDWR, 0666);\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[e._v("open an existing memory segment to share it")])]),e._v(" "),a("li",[a("p",[e._v("set the size of object")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ftruncate(shm fd, 4096)\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("map into address space(find free unused area)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("char * shared_addr = mmap(NULL, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[e._v("process write to the shared memory")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('sprintf(shared_addr, "writing to the shared memory");\n')])])]),a("h2",{attrs:{id:"sockets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sockets"}},[e._v("#")]),e._v(" sockets")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Special IP address 127.0.0.1 (loopback) to refer to system on which process is running")])]),e._v(" "),a("li",[a("p",[e._v("tcp socket, udp socket, multicast socket in Java")])])]),e._v(" "),a("h1",{attrs:{id:"rpc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rpc"}},[e._v("#")]),e._v(" RPC")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("stubs")])]),e._v(" "),a("li",[a("p",[e._v("marshalls")])]),e._v(" "),a("li",[a("p",[e._v("RPCGen")])]),e._v(" "),a("li",[a("p",[e._v("matchmaker")])])]),e._v(" "),a("h1",{attrs:{id:"pipes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pipes"}},[e._v("#")]),e._v(" pipes")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("ordinary pipes\nonly access to parent-child relationship, unidirectional")])]),e._v(" "),a("li",[a("p",[e._v("named pipes\nall access, bidirectional, used for several processes")])])]),e._v(" "),a("p",[e._v("provide buffer, block, unblock producers and consumers")]),e._v(" "),a("p",[e._v("4kb guaranteed to be atomic")]),e._v(" "),a("p",[e._v("64kb")]),e._v(" "),a("p",[e._v("scheduling, blocking, resource management.")]),e._v(" "),a("h1",{attrs:{id:"process-syncronization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-syncronization"}},[e._v("#")]),e._v(" process syncronization")]),e._v(" "),a("h2",{attrs:{id:"critical-section-problem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#critical-section-problem"}},[e._v("#")]),e._v(" Critical section problem")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n  entry section\n\n    critical section\n\n  exit sectionm\n\n  remainder section\n\n} while(true)\n\n")])])]),a("ol",[a("li",[a("p",[e._v("mutual exclusion")])]),e._v(" "),a("li",[a("p",[e._v("progress")])]),e._v(" "),a("li",[a("p",[e._v("bounded waiting")])])]),e._v(" "),a("h3",{attrs:{id:"peterson-s-solution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peterson-s-solution"}},[e._v("#")]),e._v(" Peterson's solution")]),e._v(" "),a("p",[e._v("load and store are atomic")]),e._v(" "),a("p",[e._v("turn indicates whose turn")]),e._v(" "),a("p",[e._v("flag indicates if ready to enter critical section")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n  flag[i] = true;\n  turn = j;\n  while (flag[j] && turn == j);\n\n    critical section\n\n  flag[i] = false;\n\n    remainder section\n\n} while (true);\n")])])]),a("h2",{attrs:{id:"locks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#locks"}},[e._v("#")]),e._v(" locks")]),e._v(" "),a("ul",[a("li",[e._v("test and set")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function test_and_set(boolean * target) {\n  boolean rv = *target;\n  target = true;\n  return rv;\n}\n\ndo {\n  while (test_and_set(&block));\n    critical section\n  lock = false;\n    remainder section\n} while(true);\n\n")])])]),a("ul",[a("li",[e._v("compare and swap")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int compare_and_swap(int *value, int expected, int new_value) {\n  int temp = *value;\n  if (*value == expected)\n    *value = new_value;\n  return temp;\n}\n\ndo {\n  while(compare_and_swap(&lock, 0, 1) != 0);\n    critical section\n  lock = 0;\n    remainder section\n} while(true);\n\n")])])]),a("h2",{attrs:{id:"bounded-waiting-mutual-exclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bounded-waiting-mutual-exclusion"}},[e._v("#")]),e._v(" bounded waiting mutual exclusion")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n  waiting[i] = true;\n  key = true;\n  while (waiting[i] && key)\n    key = test_and_set(&lock);\n\n  waiting[i] = false;\n    /* critical section */\n  j = (i + 1) % n;\n  while ((j != i) && !waiting[j])\n    j = (j + 1) % n;\n\n  if (j == i)\n    lock = false;\n  else\n    waiting[j] = false;\n     /* remainder section */\n} while (true);\n")])])]),a("h2",{attrs:{id:"mutex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutex"}},[e._v("#")]),e._v(" mutex")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("acquire")])]),e._v(" "),a("li",[a("p",[e._v("release")])]),e._v(" "),a("li",[a("p",[e._v("both must be atomic")])]),e._v(" "),a("li",[a("p",[e._v("require busy waiting")])]),e._v(" "),a("li",[a("p",[e._v("thus call a spinlock")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("acquire() {\n  while (!available);\n    /* busy wait */\n  available = false;\n}\nrelease() {\n  available = true;\n}\n\n")])])]),a("h2",{attrs:{id:"semaphore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[e._v("#")]),e._v(" semaphore")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("wait, P()")])]),e._v(" "),a("li",[a("p",[e._v("signal, V()")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("wait(S) {\n  while (S <= 0);\n  // busy wait\n  S--;\n}\n\nsignal(S) {\n  S++;\n}\n\n")])])]),a("ul",[a("li",[a("p",[e._v("counting semaphore")])]),e._v(" "),a("li",[a("p",[e._v("binary semaphore")])])]),e._v(" "),a("blockquote",[a("blockquote",[a("p",[a("strong",[e._v("implementation with busy waiting")])])])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("must guarantee no processes run wait or signal of one semaphore at the same time")])]),e._v(" "),a("li",[a("p",[e._v("thus must be put in critical section, and we have busy waiting")])]),e._v(" "),a("li",[a("p",[e._v("implementation code is short, so chance of busy waiting is rare.")])])]),e._v(" "),a("blockquote",[a("blockquote",[a("p",[a("strong",[e._v("implementation without busy waiting")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("typedef struct {\n  int value;\n  struct process *list;\n} semaphore;\n")])])]),a("ul",[a("li",[e._v("block")])]),e._v(" "),a("p",[e._v("place the process on the waiting queue")]),e._v(" "),a("ul",[a("li",[e._v("wakeup")])]),e._v(" "),a("p",[e._v("remove the process from the waiting queue, add to ready queue")]),e._v(" "),a("h2",{attrs:{id:"deadlock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deadlock"}},[e._v("#")]),e._v(" deadlock")]),e._v(" "),a("p",[e._v("two or more processes are waiting indefinitely for an event that can be caused by only one of the waiting processes")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("P_0")]),e._v(" "),a("th",[e._v("P_1")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("wait(S);")]),e._v(" "),a("td",[e._v("wait(Q);")])]),e._v(" "),a("tr",[a("td",[e._v("wait(Q);")]),e._v(" "),a("td",[e._v("wait(S);")])]),e._v(" "),a("tr",[a("td",[e._v("...")]),e._v(" "),a("td",[e._v("...")])]),e._v(" "),a("tr",[a("td",[e._v("signal(S);")]),e._v(" "),a("td",[e._v("signal(Q);")])]),e._v(" "),a("tr",[a("td",[e._v("signal(Q);")]),e._v(" "),a("td",[e._v("signal(S);")])])])]),e._v(" "),a("h2",{attrs:{id:"starvation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#starvation"}},[e._v("#")]),e._v(" starvation")]),e._v(" "),a("p",[e._v("A process may never be removed from the semaphore queue in which it is\nsuspended")]),e._v(" "),a("h3",{attrs:{id:"bounded-buffer-problem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bounded-buffer-problem"}},[e._v("#")]),e._v(" bounded buffer problem")]),e._v(" "),a("p",[e._v("n buffers")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("semaphore mutex = 1")])]),e._v(" "),a("li",[a("p",[e._v("semaphore full = 0")])]),e._v(" "),a("li",[a("p",[e._v("semaphore empty = n")])])]),e._v(" "),a("blockquote",[a("blockquote",[a("p",[e._v("producer")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n  // produce an item;\n  wait(empty);\n  wait(mutex);\n\n  ...\n  // add next produced to the buffer\n  ...\n\n  signal(mutex);\n  signal(full);\n} while(true);\n")])])]),a("blockquote",[a("blockquote",[a("p",[e._v("consumer")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n  wait(full);\n  wait(mutex);\n\n  ...\n  // remove an item from buffer\n\n  signal(mutex);\n  signal(empty);\n\n  // consumer the item\n} while(true);\n")])])]),a("h3",{attrs:{id:"reader-write-problem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reader-write-problem"}},[e._v("#")]),e._v(" reader-write problem")]),e._v(" "),a("p",[e._v("if a writer is in the critical section and n readers are waiting, then one reader is queued on rw mutex, and n − 1 readers are queued on mutex")]),e._v(" "),a("ul",[a("li",[e._v("semaphore rw mutex = 1")]),e._v(" "),a("li",[e._v("semaphore mutex = 1")]),e._v(" "),a("li",[e._v("int read count = 0")])]),e._v(" "),a("blockquote",[a("blockquote",[a("p",[e._v("writer")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n  wait(rw mutex);\n  ...\n  /* writing is performed */\n  ...\n  signal(rw mutex);\n} while (true);\n")])])]),a("blockquote",[a("blockquote",[a("p",[e._v("producer")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n  wait(mutex);\n  read count++;\n\n  if (read count == 1)\n    wait(rw mutex);\n\n  signal(mutex);\n    ...\n    /* reading is performed */\n    ...\n  wait(mutex);\n  read count--;\n\n  if (read count == 0)\n    signal(rw mutex);\n\n  signal(mutex);\n} while (true);\n")])])]),a("h3",{attrs:{id:"dining-philosophers-problem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dining-philosophers-problem"}},[e._v("#")]),e._v(" dining-philosophers problem")]),e._v(" "),a("p",[e._v("five chair, five single chopsticks")]),e._v(" "),a("p",[e._v("when think, does not interact with others, when hungry, pick two around him or her.")]),e._v(" "),a("p",[e._v("allocate several resources among several processes in a deadlock-free and starvation-free manner")]),e._v(" "),a("blockquote",[a("blockquote",[a("p",[e._v("soluttion with deadlock")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\n  wait(chopstick[i]);\n  wait(chopstick[(i+1) % 5]);\n    ...\n    /* eat for awhile */\n    ...\n  signal(chopstick[i]);\n  signal(chopstick[(i+1) % 5]);\n    ...\n    /* think for awhile */\n    ...\n} while (true);\n")])])]),a("blockquote",[a("blockquote",[a("p",[e._v("solution with "),a("a",{attrs:{href:"#monitors"}},[e._v("monitors")]),e._v(" and "),a("a",{attrs:{href:"#conditional-variables"}},[e._v("conditional variables")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("monitor philosopher-dining-problem {\n  enum {THINKING, HUNGRY, EATING} state[5];\n  condition self[5];\n\n  void pickup(int i) {\n    state[i] = HUNGRY;\n    test[i];\n    if (state[i] != EATING) {\n      self[i].wait();\n    }\n  }\n\n  void putdown(int i) {\n    state[i] = THINKING;\n    test[i + 1];\n    test[(i + 4) % 5];\n  }\n\n  void test(int i) {\n    if (state[(i+1)%5] != EATING && state[(i+4)%5] != EATING && state[i] == HUNGRY) {\n      state[i] = EATING;\n      self[i].signal();\n    }\n  }\n\n  initialization_code() {\n    for(int i = 0; i < 5; i++) {\n      state[i] = THINKING;\n    }\n  }\n\n}\n\nDiningPhilosophers.pickup(i);\n\n... eat ...\n\nDiningPhilosophers.putdown(i);\n\n")])])]),a("h2",{attrs:{id:"monitors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monitors"}},[e._v("#")]),e._v(" monitors")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("high-level abstraction")])]),e._v(" "),a("li",[a("p",[e._v("internal vars only accessible by the code within the procedure")])]),e._v(" "),a("li",[a("p",[e._v("only one process may be active within the monitor at a time")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("monitor name {\n  procedure 1 {};\n  procedure 2 {};\n  initialize() {};\n}\n")])])]),a("h2",{attrs:{id:"monitors-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monitors-implementation"}},[e._v("#")]),e._v(" monitors implementation")]),e._v(" "),a("p",[e._v("The signaling processes can use "),a("code",[e._v("next")]),e._v(" to suspend themselves.\nAn integer variable "),a("code",[e._v("next_count")]),e._v(" is also provided to count the number of processes suspended on "),a("code",[e._v("next")])]),e._v(" "),a("blockquote",[a("p",[e._v("external function F")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("wait(mutex);\n  ...\n  body of F\n  ...\nif (next_count > 0)\n  signal(next);\nelse\n  signal(mutex);\n")])])]),a("blockquote",[a("p",[e._v("x.wait()\nx_count, x_sem both init to 0")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("x_count++;\n\nif (next_count > 0)\n  signal(next);\nelse\n  signal(mutex);\n\nwait(x_sem);\nx_count--;\n\n")])])]),a("blockquote",[a("p",[e._v("x.signal()")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (x_count > 0) {\n  next_count++;\n  signal(x_sem);\n  wait(next); // signal and wait\n  next_count--;\n}\n")])])]),a("h2",{attrs:{id:"condition-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#condition-variables"}},[e._v("#")]),e._v(" condition variables")]),e._v(" "),a("p",[e._v("wait and signal between two processes")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("x.wait()")]),e._v(" "),a("ul",[a("li",[e._v("the process invoking this operation is suspended until another process invokes signal")])])]),e._v(" "),a("li",[a("p",[e._v("x.signal()")]),e._v(" "),a("ul",[a("li",[e._v("resume one of the processes that invoked x.wait()")]),e._v(" "),a("li",[e._v("if no x.wait(), no effect on the variable.")])])])]),e._v(" "),a("p",[e._v("The x.signal() operation resumes exactly one suspended process.")]),e._v(" "),a("p",[e._v("If no process is suspended, then the signal() operation has no effect")]),e._v(" "),a("blockquote",[a("blockquote",[a("p",[e._v("x.wait in Q, x.signal in P, P and Q cannot continue simultaneously, thus two options:")])])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("P signal and P wait, until Q leaves the monitor, or for another condition")])]),e._v(" "),a("li",[a("p",[e._v("P signal and P continue, Q wait until P leaves the monitor, or Q wait for another condition")])])]),e._v(" "),a("h2",{attrs:{id:"single-resource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#single-resource"}},[e._v("#")]),e._v(" single resource")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("monitor ResourceAllocator\n{\n  boolean busy;\n  condition x;\n  void acquire(int time) {\n    if (busy)\n      x.wait(time);\n    busy = TRUE;\n  }\n  void release() {\n    busy = FALSE;\n    x.signal();\n  }\n\n  initialization code() {\n    busy = FALSE;\n  }\n}\n")])])]),a("h2",{attrs:{id:"sync-in-linux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync-in-linux"}},[e._v("#")]),e._v(" sync in linux")]),e._v(" "),a("blockquote",[a("p",[e._v("Prior to kernel Version 2.6, disables interrupts to implement short critical sections")])]),e._v(" "),a("blockquote",[a("p",[e._v("On single-cpu system, spinlocks replaced by enabling and disabling kernel preemption")])]),e._v(" "),a("h2",{attrs:{id:"distributed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#distributed"}},[e._v("#")]),e._v(" Distributed")]),e._v(" "),a("p",[e._v("itrusion detection system\nmimicking virtual machine\nmariadb for transaction\npostgre for spatial")]),e._v(" "),a("p",[e._v("plotly")]),e._v(" "),a("p",[e._v("coreos\nggn fleet etcd\ngo-nerve health-check\ngo-synapse")])])}),[],!1,null,null,null);t.default=r.exports}}]);