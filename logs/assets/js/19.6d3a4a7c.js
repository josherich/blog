(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{224:function(t,e,a){"use strict";a.r(e);var s=a(0),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"math"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[t._v("#")]),t._v(" Math")]),t._v(" "),a("h3",{attrs:{id:"matrix-exp-e-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matrix-exp-e-a"}},[t._v("#")]),t._v(" matrix exp, e^A")]),t._v(" "),a("p",[t._v("taylor expansion, well defined")]),t._v(" "),a("p",[t._v("can directly write ODE solution:")]),t._v(" "),a("p",[t._v("dx/dt = Ax")]),t._v(" "),a("p",[t._v("x = exp(tA)x_0")]),t._v(" "),a("p",[t._v("if A is diagonalizable, A = PvP^-1, v is diagonal matrix")]),t._v(" "),a("p",[t._v("exp(A) = P exp(v) P^-1")]),t._v(" "),a("p",[t._v("inverse is exp(-A)")]),t._v(" "),a("h3",{attrs:{id:"matrix-hermitian"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matrix-hermitian"}},[t._v("#")]),t._v(" Matrix hermitian")]),t._v(" "),a("h3",{attrs:{id:"singular-matrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singular-matrix"}},[t._v("#")]),t._v(" Singular Matrix")]),t._v(" "),a("p",[t._v("A square matrix that is not invertible is called singular or degenerate. A square matrix is singular if and only if its determinant is 0.")]),t._v(" "),a("h3",{attrs:{id:"optimal-transfer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimal-transfer"}},[t._v("#")]),t._v(" optimal transfer")]),t._v(" "),a("h3",{attrs:{id:"topology-of-tanh-layers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#topology-of-tanh-layers"}},[t._v("#")]),t._v(" Topology of tanh Layers")]),t._v(" "),a("p",[t._v("transformations don’t affect topology, are called homeomorphisms")]),t._v(" "),a("p",[t._v("tanh (and sigmoid and softplus but not ReLU) are continuous functions with continuous inverses")]),t._v(" "),a("h2",{attrs:{id:"numerical-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numerical-methods"}},[t._v("#")]),t._v(" Numerical Methods")]),t._v(" "),a("p",[t._v("Qs:")]),t._v(" "),a("p",[t._v("how stiff")]),t._v(" "),a("p",[t._v("how many vars")]),t._v(" "),a("p",[t._v("how accrate")]),t._v(" "),a("p",[t._v("how sensitive(chaos)")]),t._v(" "),a("p",[t._v("how well-behaved is f(x,t)")]),t._v(" "),a("p",[t._v("how costly is f(x,t) and its jacobian")]),t._v(" "),a("p",[t._v("implicit,")]),t._v(" "),a("p",[t._v("more stable, solving stiff problems requires implicit methods")]),t._v(" "),a("p",[t._v("Euler's method")]),t._v(" "),a("p",[t._v("trapezoidal")]),t._v(" "),a("p",[t._v("Newton-Raphson")]),t._v(" "),a("p",[t._v("stability criterion")]),t._v(" "),a("p",[t._v("x'(t) = a x(t)")]),t._v(" "),a("p",[t._v("forward euler is conditionally stable")]),t._v(" "),a("p",[t._v("backward euler is unconditionally stable")]),t._v(" "),a("p",[t._v("truncation error")]),t._v(" "),a("p",[t._v("Runge-Kutta methods")]),t._v(" "),a("p",[t._v("stage order")]),t._v(" "),a("p",[t._v("Multi-step methods")]),t._v(" "),a("p",[t._v("predictor-corrector method")]),t._v(" "),a("p",[t._v("richardson extrapolation")]),t._v(" "),a("p",[t._v("automatic selection")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://epubs.siam.org/doi/pdf/10.1137/0904010?casa_token=sBjDZTSayFQAAAAA:XhlfyWkS4MRFNRnrZ6LmQff_UXAH7riLBkpcA58llDnYEJycmMMbMCli9cFkoYKRT7uNos94IpA",target:"_blank",rel:"noopener noreferrer"}},[t._v("Automatic Selection of Methods for Solving Stiff and Nonstiff Systems of Ordinary Differential Equations | SIAM Journal on Scientific and Statistical Computing | Vol. 4, No. 1 | Society for Industrial and Applied Mathematics"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("instability")]),t._v(" "),a("p",[t._v("zero stability")]),t._v(" "),a("h3",{attrs:{id:"absolute-stability-for-a-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#absolute-stability-for-a-method"}},[t._v("#")]),t._v(" absolute stability for a method")]),t._v(" "),a("p",[t._v("Re(lambda) < 0, x'(t) = lambda x(t) numerical solution decays to 0")]),t._v(" "),a("p",[t._v("region of absolute stability z = \\lambda \\delta t")]),t._v(" "),a("p",[t._v("all scaled eigenvalues of Jacobian should be in region, for ODE system")]),t._v(" "),a("h3",{attrs:{id:"a-stable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-stable"}},[t._v("#")]),t._v(" A-stable")]),t._v(" "),a("p",[t._v("stability region contains the entire lefthalf plane")]),t._v(" "),a("p",[t._v("backward euler, implicit midpoint")]),t._v(" "),a("p",[t._v("no explicit one-step method can be A-stable")]),t._v(" "),a("p",[t._v("All explicit RK methods with r stages and of order r have the same stability region")]),t._v(" "),a("h3",{attrs:{id:"l-stable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#l-stable"}},[t._v("#")]),t._v(" L-stable")]),t._v(" "),a("p",[t._v("if it is A-stable and it damps fast componentsof the solution")]),t._v(" "),a("h3",{attrs:{id:"stiffness"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stiffness"}},[t._v("#")]),t._v(" stiffness")]),t._v(" "),a("p",[t._v("A stiff problem is one where ∆t has to be small even though the solution is smooth and a large ∆t is OK for accuracy")]),t._v(" "),a("h3",{attrs:{id:"ode-stiffness"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ode-stiffness"}},[t._v("#")]),t._v(" ODE stiffness")]),t._v(" "),a("p",[t._v("if the solution evolves on widely-separated timescales and the fast time scale decays (dies out) quickly")]),t._v(" "),a("p",[t._v("given linear ODE system, x'(t) = A x(t), decompose A to separate parts, x is formed by uncoupled n different y variables, each of n ODEs(y) is independent of the others")]),t._v(" "),a("p",[t._v("timestep of original system must be smaller than the smallest stability limits")]),t._v(" "),a("p",[t._v("the system is stiff if a strong separation of stability time scale (eigenvalue ratio)")]),t._v(" "),a("p",[t._v("Jacobian for non-linear system, complex eigenvalues")]),t._v(" "),a("p",[t._v("adjoint method")]),t._v(" "),a("p",[t._v("auto diff")]),t._v(" "),a("h2",{attrs:{id:"group"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#group"}},[t._v("#")]),t._v(" Group")]),t._v(" "),a("p",[t._v("半格是满足运算是幂等的和交换的半群。")]),t._v(" "),a("p",[t._v("半群是闭合于结合性二元运算之下的集合 S 构成的代数结构")]),t._v(" "),a("blockquote",[a("p",[t._v("集合S和其上的二元运算·:S×S→S。若·满足结合律，即：∀x,y,z∈S，有(x·y)·z=x·(y·z)，则称有序对(S,·)为半群")])]),t._v(" "),a("p",[a("strong",[t._v("history monoid")]),t._v(" is a way of representing the histories of concurrently running computer processes as a collection of strings, each string representing the individual history of a process")]),t._v(" "),a("p",[t._v("考虑任意一个偏序集合（L,≤），如果对集合L中的任意元素a,b，使得a,b在L中存在一个最大下界，和最小上界，则(L,≤)是一个格")]),t._v(" "),a("p",[t._v("一个格是完全的，如果它的所有子集都有一个交和一个并")]),t._v(" "),a("h1",{attrs:{id:"statistics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#statistics"}},[t._v("#")]),t._v(" Statistics")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Heteroscedasticity",target:"_blank",rel:"noopener noreferrer"}},[t._v("heteroskedastic"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("a collection of random variables is heteroscedastic (or heteroskedastic;[a] from Ancient Greek hetero “different” and skedasis “dispersion”) if there are sub-populations that have different variabilities from others")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Karush%E2%80%93Kuhn%E2%80%93Tucker_conditions",target:"_blank",rel:"noopener noreferrer"}},[t._v("KKT condition"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=i.exports}}]);